library(ggplot2)
library(openxlsx)
library(reshape2)
library(dplyr)
df=read.xlsx("sensores_2017_2022.xlsx",1)
colnames(df)[5]="minutos"
head(df)
datos=df%>%
group_by(yy=df$yy, mm=df$mm, dd=df$dd) %>%
summarise_if(is.numeric, mean , na.rm=TRUE)
datos
write.xlsx(datos, "diario_sensores.xlsx", row.names=FALSE)
df
View(df)
boxplot(df$7Sechura)
summary(df$7Sechura)
df["7Sechura"]
columna=df["Sechura"]
columna=df["7Sechura"]
summary(columna)
library(shiny)
library(shinythemes)
library(shiny)
library(shinythemes)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Navbar 1",
sidebarPanel(
tags$h3("Input:"),
textInput("txt1", "Given Name:", ""),
textInput("txt2", "Surname:", ""),
), # sidebarPanel
mainPanel(
h1("Header 1"),
h4("Output 1"),
verbatimTextOutput("txtout"),
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
source('D:/shiny/app.R')
runApp('D:/shiny')
source('D:/shiny/app.R')
install.packages("sen2r", dependencies = TRUE)
install.packages("sen2r", dependencies = TRUE)
library(sen2r)
sen2r()
install.packages(c("mapedit", "shiny", "shinyFiles", "shinyWidgets"))
library(sen2r)
sen2r()
install.packages(c("mapedit", "shiny", "shinyFiles", "shinyWidgets"))
install.packages(c("mapedit", "shiny", "shinyFiles", "shinyWidgets"))
myextent_1 <- system.file("extdata/vector/barbellino.geojson", package = "sen2r")
myextent_1
library(sen2r)
sen2r()
library(shiny)
install.packages("shiny")
install.packages("mapedit")
sen2r()
library(sen2r)
# Set paths
out_dir_1  <- tempfile(pattern = "sen2r_out_1_") # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_")  # folder to store downloaded SAFE
myextent_1 <- system.file("extdata/vector/area.geojson", package = "sen2r")
out_paths_1 <- sen2r(
gui = FALSE,
step_atmcorr = "l2a",
extent = myextent_1,
extent_name = "Area",
timewindow = c(as.Date("2023-06-01"), as.Date("2023-08-01")),
list_prods = c("BOA","SCL"),
list_indices = c("NDVI","MSAVI2"),
list_rgb = c("RGB432B"),
mask_type = "cloud_and_shadow",
max_mask = 10,
path_l2a = safe_dir,
path_out = out_dir_1
)
myextent_1
myextent_1 <- system.file("extdata/vector/area.geojson", package = "sen2r")
out_paths_1 <- sen2r(
gui = FALSE,
step_atmcorr = "l2a",
extent = myextent_1,
extent_name = "Area",
timewindow = c(as.Date("2023-06-01"), as.Date("2023-08-01")),
list_prods = c("BOA","SCL"),
list_indices = c("NDVI","MSAVI2"),
list_rgb = c("RGB432B"),
mask_type = "cloud_and_shadow",
max_mask = 10,
path_l2a = safe_dir,
path_out = out_dir_1
)
library(sf)
area=st_point(c(-118.2615805, 34.1168926), c(-110, 30))
area
area
area=st_geometry(c(-118.2615805, 34.1168926), c(-110, 30))
area
df <- data.frame(g_lat = c(-34.23000, 16.10000),
g_long = c(19.42833, -22.80000))
df_coord <- st_as_sf(df, coords = c(1:2))
df_coord
df <- data.frame(g_lat = c(-14.44883, -14.60961, -14.60921, -14.45918),
g_long = c(-75.99937, -76.00019, -75.78805, -75.78805))
df_coord <- st_as_sf(df, coords = c(1:2))
images_list = s2_list(
spatial_extent = border,
time_interval = as.Date(c("2023-05-01", "2023-08-01")),
max_cloud = 1
)
images_list = as.data.frame(images_list)
images_list = s2_list(
spatial_extent = df_coord,
time_interval = as.Date(c("2023-05-01", "2023-08-01")),
max_cloud = 1
)
images_list = as.data.frame(images_list)
class(df_coord)
pos <- sf::st_sfc(sf::st_point(c(9.85,45.81)), crs = 4326)
class(pos)
df <- data.frame(g_lat = c(-14.44883, -14.60961, -14.60921, -14.45918),
g_long = c(-75.99937, -76.00019, -75.78805, -75.78805))
df_coord <- st_as_sf(df, coords = c(1:2), , crs = 4326)
df <- data.frame(g_lat = c(-14.44883, -14.60961, -14.60921, -14.45918),
g_long = c(-75.99937, -76.00019, -75.78805, -75.78805))
df_coord <- st_as_sf(df, coords = c(1:2) , crs = 4326)
images_list = s2_list(
spatial_extent = df_coord,
time_interval = as.Date(c("2023-05-01", "2023-08-01")),
max_cloud = 1
)
images_list = as.data.frame(images_list)
# Set paths
out_dir_1  <- tempfile(pattern = "sen2r_out_1_") # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_")  # folder to store downloaded SAFE
myextent_1 <- system.file("extdata/vector/barbellino.geojson", package = "sen2r")
out_paths_1 <- sen2r(
gui = FALSE,
step_atmcorr = "l2a",
extent = myextent_1,
extent_name = "Barbellino",
timewindow = c(as.Date("2020-11-13"), as.Date("2020-11-25")),
list_prods = c("BOA","SCL"),
list_indices = c("NDVI","MSAVI2"),
list_rgb = c("RGB432B"),
mask_type = "cloud_and_shadow",
max_mask = 10,
path_l2a = safe_dir,
path_out = out_dir_1
)
write_scihub_login('aljes2310@gmail.com', 'NguL3YL7ZnF5*Sp')
write_scihub_login('aljes2310@gmail.com', 'NguL3YL7ZnF5*Sp')
write_scihub_login('aljes2310', 'NguL3YL7ZnF5*Sp')
images_list = s2_list(
spatial_extent = df_coord,
time_interval = as.Date(c("2023-05-01", "2023-08-01")),
max_cloud = 1
)
images_list = as.data.frame(images_list)
images_list
library(lubridate)
library(spData)
library(ggsn)
library(kableExtra)
library(cowplot)
library(reshape)
data("world")
require(rerddap)
require(tidyverse)
#Chlorophyll-a, Aqua MODIS, NPP, L3SMI, Global, 4km, Science Quality, 2003-
#present (1 Day Composite)
whichchl = ed_search(query = "MODIS Chlorophyll-a Global 1 Day")
whatis=ed_search("NCEP Global Forecast System")
info("erdMBchla3day_LonPM180")
info("erdMBchla1day_LonPM180")     #1 day
#pagina de datasets https://coastwatch.pfeg.noaa.gov/erddap/info/index.html?page=1&itemsPerPage=1000
# set spatial extent
lon = c(-90,-70)
lat =  c(-20,0)
## set temporal extent
FECHA = c("2023-08-01", "2022-08-01")
chla = griddap("erdMBchla3day_LonPM180",
latitude =  lat,
longitude = lon,
time = FECHA,
fmt = "csv")
chla = chla %>%
mutate(DATE = lubridate::as_date(time))
names(chla)[1]="Fecha"
chla=chla%>%
mutate(year=year(chla$Fecha), month=month(chla$Fecha), day=day(chla$Fecha)) %>%
select(year, month, day, longitude, latitude, chlorophyll)
chla=as_tibble(chla)
chla_prom=chla%>%select(chlorophyll)%>%
group_by(longitude=chla$longitude,latitude=chla$latitude)%>%
summarise_if(is.numeric, mean , na.rm=TRUE)
FECHA = c("2023-08-01", "2023-08-01")
chla = griddap("erdMBchla3day_LonPM180",
latitude =  lat,
longitude = lon,
time = FECHA,
fmt = "csv")
chla = chla %>%
mutate(DATE = lubridate::as_date(time))
names(chla)[1]="Fecha"
chla=chla%>%
mutate(year=year(chla$Fecha), month=month(chla$Fecha), day=day(chla$Fecha)) %>%
select(year, month, day, longitude, latitude, chlorophyll)
chla=as_tibble(chla)
chla_prom=chla%>%select(chlorophyll)%>%
group_by(longitude=chla$longitude,latitude=chla$latitude)%>%
summarise_if(is.numeric, mean , na.rm=TRUE)
chla_prom=na.omit(chla_prom)
#Interpolacion
library(reshape)
library(MBA)
library(metR)
library(colorRamps)
mba <- mba.surf(chla_prom[,c('longitude', 'latitude', 'chlorophyll')], 300, 300)
dimnames(mba$xyz.est$z) <- list(mba$xyz.est$x, mba$xyz.est$y)
df2 <- melt(mba$xyz.est$z, varnames = c('longitude', 'latitude'), value.name = 'chlorophyll')
#mapa chla blankeado
ggplot()+
geom_raster(data = df2, aes(x = longitude, y = latitude, fill = value),
interpolate= F, na.rm = T)+
geom_sf(data = world, fill = "white", col = "white")+
coord_sf(xlim = c(lon[1], lon[2]), ylim = c(lat[1], lat[2]))+
scale_fill_gradientn(colours = rev(ODV_colours), trans = scales::log10_trans() )+
theme_bw()+
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 9, colour = 1),
panel.grid = element_line(colour = NA),
panel.spacing.x = unit(10, "mm"),
plot.title = element_text(hjust = 0.5))+
guides(fill = guide_colorbar(title = expression(Chlorophyll-a~(mg~m^{-3})),
title.position = "right",
title.theme = element_text(angle = 90),
barwidth = unit(.5, "cm"),barheight = unit(7.5, "cm"),title.hjust = .5))+
labs(x = NULL, y = NULL)+
ggtitle("") +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position="none",
panel.border= element_blank())
#paleta <- c("darkblue", "cyan", "cadetblue1", "limegreen", "yellow", "orange", "darkorange", "red", "darkred", "brown")
ODV_colours <- c("#feb483", "#d31f2a", "#ffc000", "#27ab19", "#0db5e6", "#7139fe", "#d16cfa",
"blue","darkblue")
mba <- mba.surf(chla_prom[,c('longitude', 'latitude', 'chlorophyll')], 300, 300)
dimnames(mba$xyz.est$z) <- list(mba$xyz.est$x, mba$xyz.est$y)
df2 <- melt(mba$xyz.est$z, varnames = c('longitude', 'latitude'), value.name = 'chlorophyll')
#mapa chla blankeado
ggplot()+
geom_raster(data = df2, aes(x = longitude, y = latitude, fill = value),
interpolate= F, na.rm = T)+
geom_sf(data = world, fill = "white", col = "white")+
coord_sf(xlim = c(lon[1], lon[2]), ylim = c(lat[1], lat[2]))+
scale_fill_gradientn(colours = rev(ODV_colours), trans = scales::log10_trans() )+
theme_bw()+
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 9, colour = 1),
panel.grid = element_line(colour = NA),
panel.spacing.x = unit(10, "mm"),
plot.title = element_text(hjust = 0.5))+
guides(fill = guide_colorbar(title = expression(Chlorophyll-a~(mg~m^{-3})),
title.position = "right",
title.theme = element_text(angle = 90),
barwidth = unit(.5, "cm"),barheight = unit(7.5, "cm"),title.hjust = .5))+
labs(x = NULL, y = NULL)+
ggtitle("") +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position="none",
panel.border= element_blank())
dim(mba)
dim(df2)
library(shiny)
library(shiny)
install.packages(c("later","promises","rlang"))
install.packages("shiny")
shiny::runApp('C:/Users/Alfredo/Desktop/freelancer/faraon/faraon')
getwd()
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
getwd()
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
getwd()
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
runApp('C:/Users/Alfredo/Desktop/freelancer/faraon')
setwd("C:/Users/Alfredo/Desktop/freelancer/faraon/datos/")
cartera <- read_csv("cartera2.txt")
cartera
setwd("C:/Users/Alfredo/Desktop/freelancer/faraon/datos/")
cartera <- read_csv("cartera2.txt", sep=",")
with open('cartera2.txt') as f:
install.packages("lingmatch")
library(lingmatch)
read.dic('cartera2.txt')
